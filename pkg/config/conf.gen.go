// Code generated by baton-sdk. DO NOT EDIT!!!
package config

import "reflect" 

type Mongodbatlas struct {
	PublicKey string `mapstructure:"public-key"`
	PrivateKey string `mapstructure:"private-key"`
	CreateInviteKey bool `mapstructure:"create-invite-key"`
	EnableSyncDatabases bool `mapstructure:"enable-sync-databases"`
	EnableMongoDriver bool `mapstructure:"enable-mongo-driver"`
	DeleteDatabaseUserWithReadOnly bool `mapstructure:"delete-database-user-with-read-only"`
	MongoProxyHost string `mapstructure:"mongo-proxy-host"`
	MongoProxyPort int `mapstructure:"mongo-proxy-port"`
	MongoProxyUser string `mapstructure:"mongo-proxy-user"`
	MongoProxyPass string `mapstructure:"mongo-proxy-pass"`
}

func (c* Mongodbatlas) findFieldByTag(tagValue string) (any, bool) {
	v := reflect.ValueOf(c).Elem() // Dereference pointer to struct
	t := v.Type()

	for i := 0; i < t.NumField(); i++ {
		field := t.Field(i)
		tag := field.Tag.Get("mapstructure")

		if tag == tagValue {
			return v.Field(i).Interface(), true
		}
	}
	return nil, false
}

func (c *Mongodbatlas) GetStringSlice(fieldName string) []string {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return []string{}
	}
	t, ok := v.([]string)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Mongodbatlas) GetString(fieldName string) string {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return ""
	}
	t, ok := v.(string)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Mongodbatlas) GetInt(fieldName string) int {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return 0
	}
	t, ok := v.(int)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Mongodbatlas) GetBool(fieldName string) bool {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return false
	}
	t, ok := v.(bool)
	if !ok {
		panic("wrong type")
	}
	return t
}

func (c *Mongodbatlas) GetStringMap(fieldName string) map[string]any {
	v, ok := c.findFieldByTag(fieldName)
	if !ok {
		return map[string]any{}
	}
	t, ok := v.(map[string]any)
	if !ok {
		panic("wrong type")
	}
	return t
}
